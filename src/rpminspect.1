.\" Copyright (C) 2018-2019  Red Hat, Inc.
.\" Author(s):  David Cantrell <dcantrell@redhat.com>
.\"
.\" This program is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <https://www.gnu.org/licenses/>.

.TH RPMINSPECT "1" "February 2019" "rpminspect" "Red Hat"
.SH NAME
rpminspect \- compare package builds
.SH SYNOPSIS
.B rpminspect
[
.B OPTIONS
]
.B before_build
[
.B after_build
]
.SH DESCRIPTION
.PP
rpminspect is a tool designed to help developers maintain build policy
compliance and consistency among releases.  The tool is intended to provide
output alerting the developer to any changes in the built packages that
significantly differ from a previous built; the implication being the
previous build has already been made available to users.
.PP
rpminspect originated at Red Hat as an auditing tool used by the QA
department to ensure builds complied with certain release rules and
policies.  Over time it grew to incorporate other checks, such as making
sure debugging symbols are accurate.  Users are encourage to contribute
tests for new functionality as well as bug fixes.
.PP
The software is made available as this command line program and an
accompanying library.  This is intentional.  Our findings over time have
shown that simple tools with a flexible design are more easy to integrate
in to continuous integration systems.  The library allows development of
other frontends should anyone ever be interested in that.  The thought
is that most developers will interact with rpminspect through the command
line.  Everything about an rpminspect run is configurable at runtime
through command line options as well as a configuration file.  The command
line options override the configuration file which overrides the compiled
in defaults.
.SH OPTIONS
.PP
.TP
.B \-c FILE, \-\-config=FILE
Configuration file to use (default: /etc/rpminspect/rpminspect.conf)
.TP
.B \-r STR, \-\-release=STR
String identifying the product release for the specified build or builds.
Normally rpminspect will determine this by looking for a "dist tag" at
the end of the NVR.  For build comparisons, the determined product releases
must match in order for rpminspect to continue.  If you want to compare
builds from different products, you will need to specify a product release
manually.  You will also need to specify the product release if the builds
you are comparing lack any kind of product release identifier at the end
of the NVR.
.TP
.B \-T LIST, \-\-tests=LIST
If specified, this option assumes all inspections are disabled except the
names of the ones you specify with this option.  Specify a comma-separated
list of inspections to run (default: ALL).  The names of available
inspections can be found with the \-l option.  You can also specify the
name ALL to explicitly say run all inspections.  NOTE:  This option is
mutually exclusive with the \-E option.
.TP
.B \-E LIST, \-\-exclude=LIST
If specified, this option assumes all inspections are enabled except the
names of the ones you specify with this option.  Specify a comma-separated
list of inspections to skip (default: none).  The names of available
inspections can be found with the \-l option.  You can also specify the
name ALL to explicitly say skip all inspections, though that makes the
program do nothing.  NOTE:  This option is mutually exclusive with
the \-T option.
.TP
.B \-l, \-\-list
List available output formats and inspections
.TP
.B \-a LIST, \-\-arches=LIST
Comma-separated list of architectures to inspect packages on.  By default
rpminspect will gather all available architectures for the builds you
specify, but you may want to restrict a run to just x86_64 or just
aarch64.  You can do that with this option.  If you do specify this
option, be sure to include the 'src' architecture to inspect source
packages.  The architectures you list here are validated against the
available architectures in the Koji hub and any invalid ones will report
an error.
.TP
.B \-o FILE, \-\-output=FILE
Write the results to the name output file.  By default, results go to
stdout.
.TP
.B \-F TYPE, \-\-format=TYPE
Write the inspection results in the TYPE format.  The default format
is text.  Available formats can be seen with the \-l option.
.TP
.B \-w PATH, \-\-workdir=PATH
Temporary working directory to use (default: /var/tmp/rpminspect).  You
can specify a tilde (~) character in the PATH specification and rpminspect
will expand it.  Keep in mind that the PATH you specify with ~ must exist
in order for expansion to work.
.TP
.B \-f, \-\-fetch\-only
Only download builds, do not perform any inspections (implies \-k).
This option is intended as a convenience for developers as well as
for easier integration in to different CI workflows.
.TP
.B \-k, \-\-keep
Do not remove temporary working files before exit
.TP
.B \-v, \-\-verbose
Verbose inspection output.  By default, only warnings or failures
are reported.  This option also displays informational findings.
.TP
.B \-?, \-\-help
Display usage information
.TP
.B \-V, \-\-version
Display version information
.SH USAGE
.PP
rpminspect requires very little to run.  Assuming you meet the runtime
requirements to either build the software from source or you have installed
it on your operating system, you are ready to use it.  The only required
argument is a build, which we will call the before_build.  It is possible
to run rpminspect against a single build and perform the policy checks
against the packages in it.  If two builds are specified, the policy checks
are performed, but the builds are also compared.
.PP
Use the -l option to list available inspections.  By default, all inspections
will be run.  You can restrict the program to a subset of inspections by
listing their short names and separating them with commas (no spaces).  Or
you can list inspections to skip by listing the short name prefixed with a
`!' in the same comma-delimited list.
.PP
Builds may be local RPM packages, regular Koji builds specified using Koji
syntax (the NVR or name, version, and release of a package with hyphens
separating each part), Koji module builds, or locally cached Koji builds
(regular or module).  Any valid Koji build identifier works when specifying
Koji builds though, such as the build ID number.  For more information on Koji
build specification, please see the Koji documentation.
.PP
If you specify a directory tree containing the output of a properly structured
Koji build, rpminspect can use that directly.  This may be useful for multiple
runs of rpminspect against a specific previous build where you are trying to
fix something in a new build compared against the old one.
.PP
Local RPM packages may be specified directly too if you just want to use
rpminspect on a single RPM.  You may specify a single RPM package or two if you
want rpminspect to perform the comparison inspections.
.PP
Examples:
.IP
rpminspect \-T ALL \-k zlib-1.2.7-1.fc29 zlib-1.2.7-2.fc29
.IP
rpminspect \-T license,elfsyms perl-5.28.0-47.fc6 perl-5.28.1-1.fc6
.IP
rpminspect \-T !manpage x3270-3.6ga5-6.fc31 x3270-3.6ga6-1.fc31
.IP
rpminspect \-T ALL \-a ppc64le zsh-5.7.1-3.fc31 zsh-5.7.1-4.fc31
.IP
rpminspect \-E disttag \-a ppc64le zsh-5.7.1-3.fc31 zsh-5.7.1-4.fc31
.PP
The end result of running rpminspect is a report on standard output explaining
what was found.  Descriptions of actions developers can take are provided in
the findings.
.SH SEE ALSO
.na
.nh
.BR rpm (8)
.SH AUTHOR
.PP
.nf
David Cantrell <dcantrell@redhat.com>
.fi

==========
rpminspect
==========

RPM build deviation analysis tools.  rpminspect inspects the output of an
RPM build (e.g., the output of a Koji build) and looks at the contents of
the build artifacts to report:

    * Policy compliance
    * Changes from a previous build to the current build
    * General correctness and best practices

rpminspect is the frontend tool and librpminspect provides the inspection
engine and individual inspections.  The program is configured through the
rpminspect.conf file and runtime data is provided by a vendor specific
rpminspect-data package.  The rpminspect-data-generic package in this source
tree provides a template for constructing the vendor specific data package.


Build Types Support
-------------------

rpminspect expects its input to come from Koji.  That said, Koji produces
certain types of builds that are not supported by rpminspect.  Right now,
the following Koji build types are supported:

    * RPM packages
    * Modules (https://docs.fedoraproject.org/en-US/modularity/)

More information on Koji can be found at https://pagure.io/koji


Intended Audience
-----------------

Developers, QE, release engineers, and system administrators who regularly
build RPMs for use in some environment or product.

From an individual user standpoint, rpminspect is intended to be a command
line tool you can use as a linter of sorts.  rpminspect reports and that's
it.  rpminspect can output information in JSON format which is intended to
make it easier to integrate in to automated workflows or web frontends.


Requirements
------------

A typical Linux system with a toolchain for building C software and the
following libraries (make sure the header files are available):

    * json-c
          http://json-c.github.io/json-c/

    * xmlrpc-c
          http://xmlrpc-c.sourceforge.net/

    * libxml-2.0
          http://xmlsoft.org/

    * rpm
          https://github.com/rpm-software-management/rpm

    * libarchive
          https://www.libarchive.org/

    * elfutils
          https://sourceware.org/elfutils/

    * kmod
          https://git.kernel.org/pub/scm/utils/kernel/kmod/kmod.git

    * zlib
          https://www.zlib.net/

    * mandoc (formerly mdocml)
          https://mandoc.bsd.lv/

    * iniparser
          http://ndevilla.free.fr/iniparser/

    * libyaml
          https://github.com/yaml/libyaml

    * file (for libmagic)
          http://www.darwinsys.com/file/

    * OpenSSL or LibreSSL
          https://www.openssl.org/
          http://www.libressl.org/

Most distributions include the above projects in prebuilt and packaged
form.  If those are available, you should use those packages.


Building
--------

If you got the source from a released tarball, you can probably do this:

    ./configure
    make
    make install

If you have the source cloned from git, you should do this:

    ./autogen.sh
    # then the steps above

Building from git will require autoconf, automake, libtool, and the rest
of the autotools packages.


Releasing
---------

Releases are made using these steps:

    git clean -d -x -f
    git pull
    ./autogen.sh
    ./configure
    make bumpver
    git clean -d -x -f
    ./autogen.sh
    ./configure
    make release

This will increment the x.y version number, create a new tarball, sign it,
and create a signed git tag.  All of that is pushed to github and then a
release entry is made and the tarball and detached signature are uploaded
there.


How To Use
----------

SETUP

Make sure you have installed the program and corresponding data file
collection.  On Fedora, this can be done using dnf:

    dnf install rpminspect rpminspect-data-fedora

The first package is the actual program.  The rpminspect-data-fedora package
delivers data files used by the various inspections performed by rpminspect.
It also delivers the rpminspect.conf configuration file.  Have a look at
this file and make sure it will work for your environment.  The idea is to
easily support per-vendor data packages.  For example, if CentOS needs
different settings, we should create an rpminspect-data-centos package and
customize that.

Ideally the configuration file should not need changing.  If you do find
mistakes, please file an issue or send a pull request to the project:

    https://github.com/rpminspect/rpminspect-data-fedora

We should aim for the vendor-specific data packages providing everything a
developer needs to successfully run rpminspect locally for that product.

USAGE

rpminspect is run from the command.  The input is expected to be a build as
output by Koji.  rpminspect will talk to Koji and download the build you
specify, but to avoid repeated downloads you can also download and cache a
build locally and refer to a local path.

Here is a simple invocation using tmux as an example:

    $ rpminspect -v tmux-2.9a-2.fc31 tmux-2.9a-3.fc31

This just runs with verbose mode enabled and compares tmux-2.9a-2.fc31 to
tmux-2.9a-3.fc31.  rpminspect will download the packages for these builds
and run the inspections.

If you want to keep temporary files created during the run, pass -k.
rpminspect will tell you where those files after it finishes.

You can list available inspections with the -l option:

    $ rpminspect -l

Say you only want to run the license inspection on the builds above:

    $ rpminspect -v -k -T license tmux-2.9a-2.fc31 tmux-2.9a-3.fc31

Now let's say you want to run the license and manpage inspections:

    $ rpminspect -v -k -T license,manpage tmux-2.9a-2.fc31 tmux-2.9a-3.fc31

And lastly, what if you want to run *all* inspections except the license
one:

    $ rpminspect -v -k -E license tmux-2.9a-2.fc31 tmux-2.9a-3.fc31

What about specify a locally cached build?  First, let's start by caching
the builds we have been using:

    $ mkdir ~/builds
    $ rpminspect -v -k -f tmux-2.9a-2.fc31
    $ mv PATH_RPMINSPECT_DISPLAY/after ~/builds/tmux-2.9a-2.fc31
    $ rpminspect -v -k -f tmux-2.9a-3.fc31
    $ mv PATH_RPMINSPECT_DISPLAY/after ~/builds/tmux-2.9a-3.fc31

Not exactly elegant, but it gets the job done.  Now let's run all the
inspections but specify the locally cached builds:

    $ rpminspect -v ~/builds/tmux-2.9a-2.fc31 ~/builds/tmux-2.9a-3.fc31

Easy.  Again, these locally cached builds must look like what rpminspect
would download from koji.  Hence using rpminspect to first download it, then
manually moving it to a cache.

For more information, see the man page for rpminspect(1).  And see the
--help output for information on command line option syntax.


Contributing
------------

Patches are welcome as are bug reports.  There are a lot to do in this
project.  Some things to keep in mind:

    * Please follow existing coding style in files you modify.  Things like
      variable and function naming, spacing, and indentation.  I want to
      avoid wildly varying code styles throughout the tree.

    * New inspections in librpminspect need to be in the form of an
      inspect_NAME.c file with a driver added to the main struct.  You may
      add static and non-static support functions to your inspect_NAME.c file
      and expose those as part of the librpminspect API.  If the function is
      generic enough, feel free to start a new source file.

    * Test cases or updates to existing test cases need to accompany patches
      and new code submissions.

    * Use the standard C library whenever possible.  Code using glib,
      libbsd, or any other type of generic utility library is going to be
      reviewed and likely rejected until it is modified to use the standard C
      library.

    * That said, inspections are expected to make use of available libraries
      for performing their work.  When given the option between a library
      and forking an execing a program, please use the library.  This is not
      always possible, but in many cases it is.

    * Alternative libraries intended to replace a build requirement are ok
      so long as configure.ac and the corresponding Makefile.am templates
      are modified to conditionalize everything.  For example, if there is
      a compatible but different json-c library, it's ok to add configure
      options that would be something like:

          --disable-json-c --enable-other-json-c

      If this requires modification in the code, try to minimize the use
      of cpp macros.

    * See the TODO file for a current list of things that need work.


Licensing and Copyright
-----------------------

The project is licensed under the GNU General Public License version 3 or,
at your option, any later version.  A number of contributions have been
under the Apache License 2.0 and GPLv3+ allows for that.

Copyright statements are in the boilerplates of each source file.
